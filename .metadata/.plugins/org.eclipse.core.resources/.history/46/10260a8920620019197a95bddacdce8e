package array;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class SortingAlgorithms {
	private final static int[] ARRAY_LENGTH = new int[] {1000, 10000, 100000};
	private static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	
	public static void main(String[] args) {
		int[] arr1;
		int[] arr2;
		int[] arr3;
		Date now = new Date();
		String nowStr = format.format(now);
		
		for(int x = 0;x < ARRAY_LENGTH.length;x++) {
			arr1 = new int[ARRAY_LENGTH[x]];
			arr2 = new int[ARRAY_LENGTH[x]];
			arr3 = new int[ARRAY_LENGTH[x]];
			
			System.out.println("Array Length is " + ARRAY_LENGTH[x]);
			for(int i = 0;i < arr1.length;i++) {
				int num =  (int)(Integer.MAX_VALUE * Math.random());
				arr1[i] = num;
				arr2[i] = num;
				arr3[i] = num;
			}
			
			long start_time = 0;
			long run_time = 0;
			double res = 0;
			
			start_time = System.currentTimeMillis();	
			insertionSort(arr1);
			run_time = System.currentTimeMillis() - start_time;
			
			res = run_time/1000;
			System.out.println(nowStr + " InsertionSort for array 1 took " + res + "seconds" );
			
			start_time = System.currentTimeMillis();	
			selectionSort(arr2);
			run_time = System.currentTimeMillis() - start_time;
			
			res = run_time/1000;
			System.out.println(nowStr + " SelectionSort for array 2 took " + res + "seconds" );
			
			start_time = System.currentTimeMillis();	
			Arrays.sort(arr3);
			run_time = System.currentTimeMillis() - start_time;
	
			
			res = run_time/1000.00;
			System.out.println(nowStr + " Arrays.sort() for array 3 took " + res + "seconds" );
		}
	}
	
	static void insertionSort(int[] A) {
		// Sort the array A into increasing order.
		int itemsSorted; // Number of items that have been sorted so far.
		for (itemsSorted = 1; itemsSorted < A.length; itemsSorted++) {
		// Assume that items A[0], A[1], ... A[itemsSorted-1]
		// have already been sorted. Insert A[itemsSorted]
		// into the sorted part of the list.
		int temp = A[itemsSorted]; // The item to be inserted.
		int loc = itemsSorted - 1; // Start at end of list.
		while (loc >= 0 && A[loc] > temp) {
		A[loc + 1] = A[loc]; // Bump item from A[loc] up to loc+1.
		loc = loc - 1; // Go on to next location.
		}
		A[loc + 1] = temp; // Put temp in last vacated space.
		}
	}
	
	static void selectionSort(int[] A) {
		// Sort A into increasing order, using selection sort
		for (int lastPlace = A.length-1; lastPlace > 0; lastPlace--) {
		// Find the largest item among A[0], A[1], ...,
		// A[lastPlace], and move it into position lastPlace
		// by swapping it with the number that is currently
		// in position lastPlace.
		int maxLoc = 0; // Location of largest item seen so far.
		for (int j = 1; j <= lastPlace; j++) {
		if (A[j] > A[maxLoc]) {
		// Since A[j] is bigger than the maximum we’ve seen
		// so far, j is the new location of the maximum value
		// we’ve seen so far.
		maxLoc = j;
		}
		}
		int temp = A[maxLoc]; // Swap largest item with A[lastPlace].
		A[maxLoc] = A[lastPlace];
		A[lastPlace] = temp;
		} // end of for loop
	}
}
